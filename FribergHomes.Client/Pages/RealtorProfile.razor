@using FribergHomes.Client.Authentications
@using FribergHomes.Client.Components
@using FribergHomes.Client.Services.Interfaces
@using Microsoft.AspNetCore.Authorization

@page "/realtorprofile"

@inject IAuthService AuthService
@inject IRealtor RealtorService
@inject ISalesObject SalesObjectService
@inject NavigationManager NavMan
@attribute [Authorize(Roles = "Admin, Realtor")]


<div class="content">

    <h3>Mäklarprofil</h3>

    <hr />

    @if (Realtor is null)
    {
        <span>Laddar mäklare...</span>
    }
    else
    {
        @if (!ShowCreateForm)
        {

            <div class="">

                @* Profilbild *@

                <span>Profilbild</span>
                <img src="@Realtor.Picture" alt="profilbild" class="profile-picture" width="500" /> @* TODO: visa defaultbild *@

                <EditButton TargetObject="Realtor" />

            </div>

            <div class="">

                @* Beskrivning *@

                <h4>@Realtor.FullName</h4>
                <span>@Realtor.AgencyName</span>
                 @* Länka till byrå *@

            </div>
        }

        <div>

            <CascadingValue Value="Realtor">

                @if (ShowCreateForm)
                {
                    <CreateSalesObject HideForms="HideForms" /> @* HideForms = Parameter callback *@
                }
                @if (ShowEditForm)
                {
                    <p>Visa editform</p>
                }

            </CascadingValue>


            @* Funktionsknappar *@

            <Button Color="ButtonColor.Warning" Disabled="@(!selectedObject.Any())" @onclick="RedirectToEdit">Editera</Button>

            <Button Color="ButtonColor.Danger" Disabled="@(!selectedObject.Any())" @onclick="RedirectToDelete">Radera</Button>

            <Button Color="ButtonColor.Success" @onclick="(() => ShowCreateForm = true)">Skapa annons</Button>

            <hr/>

            @* Lista - egna försäljningsobjekt *@
            <div>

                <h4>Försäljningsobjekt</h4>

                <Grid @ref="grid"
                      TItem="SalesObjectDTO"
                      AllowSorting="true"
                      AllowSelection="true"
                      Class=""
                      DataProvider="GetSalesObjects"
                      SelectedItemsChanged="OnSelectedItemsChanged"
                      Responsive="true">

                    <GridColumn TItem="SalesObjectDTO" HeaderText="Kategori" SortKeySelector="item => item.CategoryLogoUrl">
                        @context.CategoryName
                    </GridColumn>

                    <GridColumn TItem="SalesObjectDTO" HeaderText="Adress" SortKeySelector="item => item.Adress">
                        @context.Adress
                    </GridColumn>

                    <GridColumn TItem="SalesObjectDTO" HeaderText="Kommun" SortKeySelector="item => item.CountyName">
                        @context.CountyName
                    </GridColumn>

                    <GridColumn TItem="SalesObjectDTO" HeaderText="Pris" SortKeySelector="item => item.CurrentPrice">
                        @context.CurrentPrice
                    </GridColumn>

                </Grid>
            </div>
        </div>
    } @* Avslut (Realtor is not null) *@
</div>



@code {

    [CascadingParameter]
    public Task<AuthenticationState>? AuthState { get; set; }

    [Parameter]
    public RealtorDTO? Realtor { get; set; }

    private IEnumerable<SalesObjectDTO> salesObjects = default!;

    private HashSet<SalesObjectDTO> selectedObject = new();

    private Grid<SalesObjectDTO> grid = default!;

    private bool ShowCreateForm;

    private bool ShowEditForm;


    protected override async Task OnInitializedAsync()
    {
        var userId = await AuthService.GetUserId();

        Realtor = await RealtorService.GetRealtorByIdAsync(userId);
    }

    private async Task HideForms()
    {
        await grid.RefreshDataAsync();
        ShowCreateForm = false;
        ShowEditForm = false;

    }

    private void RedirectToEdit()
    {
        NavMan.NavigateTo($"/edit/salesobject/{selectedObject.First().Id}");
    }

    private void RedirectToDelete()
    {
        NavMan.NavigateTo($"/delete/salesobject/{selectedObject.First().Id}");
    }

    private async Task<GridDataProviderResult<SalesObjectDTO>> GetSalesObjects(GridDataProviderRequest<SalesObjectDTO> request)
    {
        if (Realtor is not null)
        {
            salesObjects = await SalesObjectService.GetAllByRealtor(Realtor.Id);
        }

        return await Task.FromResult(request.ApplyTo(salesObjects));
    }

    private Task OnSelectedItemsChanged(HashSet<SalesObjectDTO> salesObjects)
    {
        selectedObject = salesObjects;
        return Task.CompletedTask;
    }



}
