@* Author: Reb 2024-05-13 
    Updated: Added LocalStorage and StateProvider / Reb 2024-05-14
*@
@page "/login"
@using Blazored.LocalStorage
@using FribergHomes.Client.Helper
@using Microsoft.AspNetCore.Components.Authorization
@inject TokenHandler tokenHandler
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthStateProvider


<div>
    @if (error != null)
    {
        <p>@error</p>    
    }
    <h1>Logga in</h1>
    <hr />
    <div class="row justify-content-center pb-3 pt-4">
        <div class="col-md-4">
            <section>
                <form method="post" @onsubmit="Login">
                    <div class="form-floating mb-3">
                        <input @bind="email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <label class="form-label">Email</label>
                        <span class="text-danger"></span>
                    </div>
                    <div class="form-floating mb-3">
                        <input @bind="password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <label class="form-label">Password</label>
                        <span class="text-danger"></span>
                    </div>
                    <div>
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Logga in</button>
                    </div>
                </form>
            </section>
        </div>
    </div>
</div>
@code {

    private string email;
    private string password;
    private string token;
    private string error;

    private AuthResponseDTO authResponse;
    private AuthenticationState authState;


    private async Task Login()
    {
        try
        {
            // token = await tokenHandler.GetToken(email, password); // hämtar token-string

            authResponse = await tokenHandler.GetToken(email, password); // hämtar authResponse - innehåller UserId, email och Id

            await localStorage.SetItemAsync("jwt", authResponse.Token); // lagrar token i localStorage som jwt
            var jwt = await localStorage.GetItemAsync<string>("jwt"); // hämtar token som ligger i localStorage jwt

            authState = await AuthStateProvider.GetAuthenticationStateAsync(); // kollar AuthState -> kollar den även Roller?
            
            tokenHandler.ConfigureHttpClientWithToken(httpClient, jwt); // Lägger token/jwt i Bearer/Header

            NavigationManager.NavigateTo("/"); // navigeras till Index - test för att se att de funkar
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}
