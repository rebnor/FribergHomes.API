@* Author: Sanna
   Co-author: Rebecka
*@

@page "/add"
@using FribergHomes.Client.Services.Interfaces
@using FribergHomes.Client.DTOs
@inject ISalesObject salesService
@inject ICategory categoryService
@inject IAgencyService agencyService
@inject IRealtor realtorService
@inject ICounty countyService
@inject NavigationManager NavigationManager

<h3>AddObject</h3>

@if (isAdded == true)
{
    <h1>Objektet lades till</h1>
}
else
{
    @if (newObject is CategoryDTO category)
    {
        <form @onsubmit="AddNewObject">
            <input type="hidden" @bind="category.Id" />
            Namn: <input type="text" @bind="category.Name" />
            Logga: <input type="text" @bind="category.IconUrl" />
            <button type="submit">Lägg till kategori</button>
        </form>
    }
    else if (newObject is AgencyDTO agency)
    {
        <form @onsubmit="AddNewObject">
            <input type="hidden" @bind="agency.Id" />
            Mäklarbyrå: <input type="text" @bind="agency.Name" />
            Presentation: <input type="text" @bind="agency.Presentation" />
            Logga: <input type="text" @bind="agency.Logo" />
            <button type="submit">Lägg till mäklarbyrå</button>
        </form>
    }
    else if (newObject is RealtorDTO realtor)
    {
        <form @onsubmit="AddNewObject">
            Namn: <input type="text" @bind="realtor.FullName" />
            Email: <input type="email" @bind="realtor.Email" />
            Telefonnummer: <input type="text" @bind="realtor.PhoneNumber" />
            Bild: <input type="text" @bind="realtor.Picture" />
            Mäklarbyrå:
            <select @bind="selectedAgencyId">
                <option value="">Välj en mäklarbyrå</option>
                @foreach (var a in agencyList)
                {
                    <option value="@a.Id">@a.Name</option>
                }
            </select>
            <button type="submit">Lägg till mäklare</button>
        </form>
    }
    else if (newObject is SalesObjectDTO salesObject)
    {
        <form @onsubmit="AddNewObject">

            Kategori:
            <select @bind="selectedCategoryId">
                <option value="">Välj en kategori</option>
                @foreach (var c in categoryList)
                {
                    <option value="@c.Id">@c.Name</option>
                }
            </select>
            Kommun:
            <select @bind="selectedCountyId">
                <option value="">Välj kommun</option>
                @foreach (var c in countyList)
                {
                    <option value="@c.Id">@c.Name</option>
                }
            </select>
            Mäklarbyrå:
            <select @bind="selectedAgencyId">
                <option value="">Välj mäklarbyrå</option>
                @foreach (var a in agencyList)
                {
                    <option value="@a.Id">@a.Name</option>
                }
            </select>
            <Button Color="ButtonColor.Primary" @onclick="GetRealtorByAgency">
                Hämta mäklare
            </Button>
            Mäklare:
            <select @bind="selectedRealtorId">
                <option value="">Välj mäklare</option>
                @foreach (var r in realtorList)
                {
                    <option value="@r.Id">@r.FullName</option>
                }
            </select>
            Adress: <input type="text" @bind="((SalesObjectDTO)salesObject).Adress" />
            Boarea: <input type="number" @bind="((SalesObjectDTO)salesObject).LivingArea" />
            Antal rum: <input type="number" @bind="((SalesObjectDTO)salesObject).Rooms" />
            Byggnadsår: <input type="number" @bind="((SalesObjectDTO)salesObject).BuildYear" />
            Beskrivning: <input type="text" @bind="((SalesObjectDTO)salesObject).ObjectDescription" />
            Pris: <input type="number" @bind="((SalesObjectDTO)salesObject).CurrentPrice" />
            <input type="hidden" @bind="((SalesObjectDTO)salesObject).ListingPrice" />
            @*  <input type="text" @bind="((SalesObjectDTO)salesObject).ImageLinks" /> *@


          @*   <Button Color="ButtonColor.Primary" @onclick="AddImageLinks">
                Lägg till bilder
            </Button> *@
            Bildlänkar: <input type="text" @bind="imageLinksInput" @oninput="AddImageLinks" multiple/> 
         

            @* Lägenhet *@
            @if (selectedCategoryId == 1)
            {
                <p>Våning:</p>
                <input type="number" @bind="((SalesObjectDTO)salesObject).Level" />
                <p>Hiss:</p>
                <input type="checkbox" @bind="((SalesObjectDTO)salesObject).Lift" />
                <p>Månadsavgift:</p>
                <input type="number" @bind="((SalesObjectDTO)salesObject).MonthlyFee" />
            }

            @* Hus *@
            @if (selectedCategoryId == 2)
            {
                <p>Biarea:</p>
                <input type="text" @bind="((SalesObjectDTO)salesObject).AncillaryArea" />
                <p>Driftkostnad:</p>
                <input type="number" @bind="((SalesObjectDTO)salesObject).YearlyCost" />
            }

            @* Radhus *@
            @if (selectedCategoryId == 3)
            {
                <p>Månadsavgift:</p>
                <input type="number" @bind="((SalesObjectDTO)salesObject).MonthlyFee" />
                <p>Biarea:</p>
                <input type="text" @bind="((SalesObjectDTO)salesObject).AncillaryArea" />
            }

            @* Semesterboende *@
            @if (selectedCategoryId == 4)
            {
                <p>Biarea:</p>
                <input type="text" @bind="((SalesObjectDTO)salesObject).AncillaryArea" />
            }
            <button type="submit">Lägg till</button>
        </form>
    }
}
@if (errorMessage != "")
{
    <p>@errorMessage</p>
}

@code {
    [Parameter]
    public string ObjectType { get; set; }
    private object newObject { get; set; }
    private string errorMessage = "";
    private bool isAdded = false;
    private int selectedAgencyId;
    private int selectedCategoryId;
    private int selectedCountyId;
    private int selectedRealtorId;
    private List<AgencyDTO> agencyList = new List<AgencyDTO>();
    private List<RealtorDTO> realtorList = new List<RealtorDTO>();
    private List<CategoryDTO> categoryList = new List<CategoryDTO>();
    private List<CountyDTO> countyList = new List<CountyDTO>();
    private bool isListingPriceSet = false;



    private string? imageLinksInput;
  


    protected override async Task OnInitializedAsync()
    {
        if (ObjectType == "category")
        {
            newObject = new CategoryDTO();
        }
        else if (ObjectType == "agency")
        {
            newObject = new AgencyDTO();
        }
        else if (ObjectType == "realtor")
        {
            agencyList = await agencyService.GetAllAgenciesAsync();
            newObject = new RealtorDTO();
        }
        else if (ObjectType == "salesObject")
        {
            categoryList = await categoryService.GetAllCategoriesAsync();
            countyList = await countyService.GetAllCountiesAsync();
            agencyList = await agencyService.GetAllAgenciesAsync();
            newObject = new SalesObjectDTO()
                {
                    ImageLinks = new List<string>()
                };
            // var salesObject = new SalesObjectDTO()
            //     {
            //         ImageLinks = new List<string>()
            //     };
            // salesObject.ListingPrice = salesObject.CurrentPrice;
            // newObject = salesObject;
        }
    }

    private async void AddNewObject()
    {
        try
        {
            if (ObjectType == "category")
            {
                await categoryService.AddCategoryAsync((CategoryDTO)newObject);
            }
            else if (ObjectType == "agency")
            {
                await agencyService.AddAgencyAsync((AgencyDTO)newObject);
            }
            else if (newObject is RealtorDTO realtor)
            {
                // realtor = (RealtorDTO)newObject;
                var selectedAgency = await agencyService.GetAgencyByIdAsync(selectedAgencyId);
                if (selectedAgency != null)
                {
                    realtor.AgencyId = selectedAgency.Id;
                    realtor.AgencyName = selectedAgency.Name;
                    realtor.AgencyLogo = selectedAgency.Logo;
                    // await realtorService.AddRealtorAsync((RealtorDTO)newObject);
                    await realtorService.AddRealtorAsync(realtor);
                }
            }
            else if (newObject is SalesObjectDTO salesObject)
            {
                //CHATTES FÖRSLAG
                if (string.IsNullOrEmpty(salesObject.Adress) || selectedCategoryId == 0 ||
              selectedCountyId == 0 || selectedAgencyId == 0 || selectedRealtorId == 0)
                {
                    errorMessage = "Alla fält blev inte korrekt ifyllda.";
                    return;
                }
                salesObject.CategoryId = selectedCategoryId;
                salesObject.CountyId = selectedCountyId;
                salesObject.AgencyId = selectedAgencyId;
                salesObject.RealtorId = selectedRealtorId;              

                //Method to set ListingPrice to same value as CurrentPrice
                if (!isListingPriceSet && ((SalesObjectDTO)salesObject).CurrentPrice != 0)
                {
                    ((SalesObjectDTO)salesObject).ListingPrice = ((SalesObjectDTO)salesObject).CurrentPrice;
                    isListingPriceSet = true;
                }
                await salesService.Create(salesObject);
            }
            isAdded = true;
            StateHasChanged();
            NavigationManager.NavigateTo("/");
        }
        catch (Exception e)
        {
            // throw new Exception("Ett oväntat fel uppstod");
            errorMessage = e.Message;
        }
    }

    private async Task GetRealtorByAgency()
    {
        realtorList = await agencyService.GetRealtorsAtAgency(selectedAgencyId);
        StateHasChanged();
    }

    private async Task AddImageLinks()
    {
        if (newObject is SalesObjectDTO salesObject && !string.IsNullOrWhiteSpace(imageLinksInput))
        {
            // var imageLinks = imageLinksInput.Split(new[] { ",", "\r\n", "\r", "\n" }, StringSplitOptions.RemoveEmptyEntries);
            // salesObject.ImageLinks.AddRange(imageLinks);



            var delimiters = new string[] { ",", ";", "\r\n", "\r", "\n" };
            var imageLinks = imageLinksInput.Split(delimiters, StringSplitOptions.RemoveEmptyEntries);
            salesObject.ImageLinks.AddRange(imageLinks);




            // Clear the input after adding
            // imageLinksInput = "";

            // // Optionally, you can update the database with the new image links here if needed
            // await salesService.Update(salesObject);
        }
    }

}